<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hammer&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-08T12:27:19.684Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hammer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端工程化初识</title>
    <link href="http://yoursite.com/2017/06/12/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%88%9D%E8%AF%86/"/>
    <id>http://yoursite.com/2017/06/12/前端工程化初识/</id>
    <published>2017-06-12T12:37:15.000Z</published>
    <updated>2018-03-08T12:27:19.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端工程化-初识"><a href="#前端工程化-初识" class="headerlink" title="前端工程化-初识"></a>前端工程化-初识</h1><h2 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h2><p>传统的前端项目构造一般只需要几个html文件,css文件加上少量的js文件，整个项目的组织关系清晰简单，js文件的相互依赖关系也不复杂。但2010年后，前端越来越往web app方向发展，一个工程或者项目有很多的js文件，相互间的依赖也较复杂，浏览器中可能需要实现更多的功能，需要全页面刷新的情况也较少。这个时候，对于如何组织项目的文件结构，如何处理js文件的相互依赖，减少请求，如何在保持效率、性能的情况下完成项目需求，都推动着前端模块化的发展。</p><a id="more"></a><p>非模块化的传统前端构造中，js文件的组织结构就是增加script标签或js文件，但是对于单个js文件如何暴露接口以及因此造成的变量名冲突，各js文件间的相互依赖，还有诸如按需加载等性能的优化会存在大量问题。遵循一定规范的模块化工程则具有无需过多考虑变量污染且依赖关系清晰可靠，代码执行效率高的优点。</p><h2 id="主流的规范"><a href="#主流的规范" class="headerlink" title="主流的规范"></a>主流的规范</h2><p>说到前端工程化，就不得不提前端模块化规范。目前主流的模块化规范为以下四种：</p><p>AMD 异步加载，异步执行，不存在阻塞，require.js遵循此规范<br>CMD 异步加载，同步执行，sea.js遵循次规范<br>CommonJS 同步加载，同步执行，nodejs、browserify.js遵循此规范<br>ES6 异步加载，同步执行，ES2015的实践规范(最新的javascript语言标准）。<br>关于加载与执行的区别：加载只是个下载文件过程，执行是代码执行阶段。<br>一般script中的js文件都是下载完即刻执行，虽然现代浏览器中的js文件是并行下载，但是其执行时间的存在肯定也会影响后续DOM结构的渲染，所有如果script标签后有DOM的渲染内容，可以考虑给该script标签添加defer属性，来延迟执行，这样就不会影响后续DOM渲染而出现白屏的等待，具体执行时机会在document的DOMContentLoaded之前（defer属性不支持早期的chrome版本）。script标签还有个async属性可以用来延时执行，但是它有个不可靠的地方是它的执行时机是在引用的js文件下载完的时刻，即一下载完就执行，可能这时候其中的依赖文件还未下载完，因为无法预测并行下载的多个js文件哪个先下载完，所以也不推荐在依赖关系复杂的项目中使用。</p><h2 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h2><p>构建工具存在的意义当然是提高前端工程的构建效率，让我们从无意义的重复劳动中解脱出来。下面简要描述了目前流行的几个自动化构建工具：</p><p>gulp: 能实现js文件压缩,css文件压缩，sass编译，图片压缩，自动刷新等功能</p><p>webpack: 模块打包工具，可以编译babel,typescript,同时也具有图片压缩，sass编译等功能</p><p>browserify: 为浏览器环境使用的模块打包工具，与nodejs一样使用require方式加载</p><p>grunt: 跟gulp类似作用，都是用于提高工作效率的</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前端工程化-初识&quot;&gt;&lt;a href=&quot;#前端工程化-初识&quot; class=&quot;headerlink&quot; title=&quot;前端工程化-初识&quot;&gt;&lt;/a&gt;前端工程化-初识&lt;/h1&gt;&lt;h2 id=&quot;前端模块化&quot;&gt;&lt;a href=&quot;#前端模块化&quot; class=&quot;headerlink&quot; title=&quot;前端模块化&quot;&gt;&lt;/a&gt;前端模块化&lt;/h2&gt;&lt;p&gt;传统的前端项目构造一般只需要几个html文件,css文件加上少量的js文件，整个项目的组织关系清晰简单，js文件的相互依赖关系也不复杂。但2010年后，前端越来越往web app方向发展，一个工程或者项目有很多的js文件，相互间的依赖也较复杂，浏览器中可能需要实现更多的功能，需要全页面刷新的情况也较少。这个时候，对于如何组织项目的文件结构，如何处理js文件的相互依赖，减少请求，如何在保持效率、性能的情况下完成项目需求，都推动着前端模块化的发展。&lt;/p&gt;
    
    </summary>
    
      <category term="first" scheme="http://yoursite.com/categories/first/"/>
    
    
      <category term="前端工程化" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
</feed>
